const fs = require('fs');
const path = require('path');
const { Client, Collection, GatewayIntentBits, ActivityType } = require('discord.js');
const connection = require('./utils/mysql');
require('dotenv').config();
const gameState = {};
const pool = require('./utils/mysql');
const { generateNewRadio } = require('./utils/radio.js');
const cron = require('node-cron');
const readline = require('readline');

const rl = readline.createInterface({
    input: process.stdin,
    output: process.stdout
});

console.log('Starting the bot...');

const client = new Client({ intents: [GatewayIntentBits.Guilds] });

client.commands = new Collection();
const commandsPath = path.join(__dirname, 'commands');
const commandFiles = fs.readdirSync(commandsPath).filter(file => file.endsWith('.js'));

for (const file of commandFiles) {
    const command = require(path.join(commandsPath, file));
    if (command.data && command.execute) {
        client.commands.set(command.data.name, command);
        console.log(`Loaded command: ${command.data.name}`);
    } else {
        console.log(`[WARNING] The command in ${file} is missing required properties.`);
    }
}

const eventsPath = path.join(__dirname, 'events');
const eventFiles = fs.readdirSync(eventsPath).filter(file => file.endsWith('.js'));

for (const file of eventFiles) {
    const event = require(path.join(eventsPath, file));
    if (event.once) {
        client.once(event.name, (...args) => event.execute(...args, client, connection, gameState));
    } else {
        client.on(event.name, (...args) => event.execute(...args, client, connection, gameState));
    }
    console.log(`Loaded event: ${event.name}`);
}

client.login(process.env.DISCORD_TOKEN).catch(error => {
    console.error('Failed to login:', error);
});

client.once('ready', () => {
    console.log('Bot is Ready & Online!');

    cron.schedule('0 0,6,12,18 * * *', () => {
        console.log('Running scheduled task: generateNewRadio');
        const footerText = 'Automated Change For Tsunami';
        const autoGenerated = true;
        generateNewRadio(client, footerText, autoGenerated);
    }, {
        timezone: "America/New_York"
    });

    client.user.setPresence({
        status: 'dnd',
        activities: [{
            name: 'Gibbo Die',
            type: ActivityType.Watching,
        }],
        afk: false,
        shardId: [0]
    });

    (async () => {
        try {
            // Example query using the pool
            const [rows] = await pool.query('SELECT 1 + 1 AS solution');
            console.log('Test query result:', rows[0].solution);
        } catch (err) {
            console.error('Database query failed:', err);
        }
    })();

    console.log("\n\nEnter Command: ")

    client.user.setStatus('online');

    rl.on('line', (input) => {
        if (input.trim() === 'generateNewRadio') {
            console.log('Manually triggering generateNewRadio...');
            const footerText = 'Manual Console Command';
            const autoGenerated = true;
            generateNewRadio(client, footerText, autoGenerated);
        } else {
            console.log(`Unknown command: ${input}`);
        }
    });

});
